#!/usr/bin/env python
# coding: utf-8

# In[25]:


from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle, Spacer
from reportlab.lib.units import inch

# Function to create PDF reports
def generate_report(report_title, report_content, filename):
    pdf = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()

    # Custom styles
    header_style = ParagraphStyle('HeaderStyle', parent=styles['Heading1'], fontSize=20, textColor=colors.darkblue, alignment=1)
    subheader_style = ParagraphStyle('SubHeaderStyle', parent=styles['Heading2'], fontSize=16, textColor=colors.black, alignment=1)
    body_style = ParagraphStyle('BodyStyle', parent=styles['BodyText'], fontSize=12)

    flowables = []

    # Add title
    flowables.append(Paragraph(report_title, header_style))
    flowables.append(Spacer(1, 0.1 * inch))

    # Add report content
    for section_title, section_content in report_content.items():
        flowables.append(Paragraph(section_title, subheader_style))
        flowables.append(Spacer(1, 0.05 * inch))

        if isinstance(section_content, list):
            # If the section content is a list, create a table
            table = Table(section_content, colWidths=[1.5 * inch, 1.5 * inch, 1.5 * inch])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('FONTSIZE', (0, 0), (-1, -1), 11),
                ('LEFTPADDING', (0, 0), (-1, -1), 10),
                ('RIGHTPADDING', (0, 0), (-1, -1), 10),
                ('TOPPADDING', (0, 0), (-1, -1), 5),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ]))
            flowables.append(table)
        else:
            flowables.append(Paragraph(section_content, body_style))
        
        flowables.append(Spacer(1, 0.1 * inch))

    # Add footer
    footer = Paragraph("Generated by Healthcare System", styles['Normal'])
    flowables.append(Spacer(1, 0.5 * inch))
    flowables.append(footer)

    # Build PDF
    pdf.build(flowables)

# 1. Comprehensive Clinical Evaluation Report
def clinical_evaluation_report():
    report_title = "Comprehensive Clinical Evaluation Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Gender:</b> Male<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Visit:</b> 2024-08-12<br/>"
            "<b>Doctor:</b> Dr. Emily Wong"
        ),
        "Chief Complaints": (
            "1. Chest pain radiating to left arm<br/>"
            "2. Shortness of breath<br/>"
            "3. Dizziness and lightheadedness"
        ),
        "Vital Signs": [
            ["Vital Sign", "Value"],
            ["Blood Pressure", "150/95 mmHg"],
            ["Heart Rate", "92 bpm"],
            ["Respiratory Rate", "20 breaths/min"],
            ["Temperature", "98.6Â°F"],
        ],
        "Physical Examination": (
            "Cardiovascular: Systolic murmur at lower sternal border, Regular rhythm<br/>"
            "Neurological: No focal deficits, Cranial nerves II-XII intact"
        ),
        "Diagnosis": "Stable angina, possible coronary artery disease.",
        "Treatment Recommendations": (
            "1. Start Amlodipine 5mg once daily<br/>"
            "2. Nitroglycerin for chest pain as needed<br/>"
            "3. Refer to cardiology for further evaluation"
        ),
        "Follow-Up Instructions": "Return in 1 month for reevaluation."
    }
    generate_report(report_title, report_content, "Clinical_Evaluation_Report.pdf")

# 2. Lab and Diagnostic Report
def lab_diagnostic_report():
    report_title = "Lab and Diagnostic Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Report:</b> 2024-08-14<br/>"
            "<b>Doctor:</b> Dr. Emily Wong"
        ),
        "Complete Blood Count (CBC)": [
            ["Parameter", "Value", "Reference Range"],
            ["White Blood Cells", "7.2x10^9/L", "4.0-11.0 x 10^9/L"],
            ["Hemoglobin", "13.5 g/dL", "13.0-17.0 g/dL"],
            ["Hematocrit", "40%", "38.0-50.0%"],
            ["Platelet Count", "250x10^9/L", "150-400 x 10^9/L"],
        ],
        "Lipid Profile": [
            ["Parameter", "Value", "Reference Range"],
            ["Total Cholesterol", "240 mg/dL", "<200 mg/dL"],
            ["LDL", "160 mg/dL", "<100 mg/dL"],
            ["HDL", "38 mg/dL", ">40 mg/dL"],
            ["Triglycerides", "200 mg/dL", "<150 mg/dL"],
        ],
        "Interpretation": "Mild hypertension-related changes; further ischemic workup recommended.",
        "Recommendations": "Schedule a follow-up for stress testing."
    }
    generate_report(report_title, report_content, "Lab_Diagnostic_Report.pdf")

# 3. Prescription and Medication Management Report
def prescription_report():
    report_title = "Prescription and Medication Management Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date:</b> 2024-08-15<br/>"
            "<b>Doctor:</b> Dr. Emily Wong"
        ),
        "Medications Prescribed": [
            ["Medication", "Dosage", "Frequency"],
            ["Amlodipine", "5mg", "Once daily"],
            ["Nitroglycerin", "0.4mg", "As needed"],
            ["Atorvastatin", "20mg", "Once daily"],
        ],
        "Observations": (
            "Monitor for side effects: Edema, Dizziness<br/>"
            "Liver function tests for atorvastatin recommended in 6 weeks."
        ),
        "Next Review": "Return in 1 month for evaluation."
    }
    generate_report(report_title, report_content, "Prescription_Report.pdf")

# 4. Specialist Consultation Report
def specialist_consultation_report():
    report_title = "Specialist Consultation Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Consultation:</b> 2024-08-16<br/>"
            "<b>Specialist:</b> Dr. Anna Taylor"
        ),
        "Consultation Reason": "Further evaluation of chest pain and risk assessment for CAD.",
        "Specialist Findings": (
            "Coronary angiography indicated; risk factors: Hypertension, Hyperlipidemia.<br/>"
            "Patient educated on lifestyle modifications."
        ),
        "Recommendations": "Follow-up angiography; dietitian referral for diet management."
    }
    generate_report(report_title, report_content, "Specialist_Consultation_Report.pdf")

# Generate all reports
clinical_evaluation_report()
lab_diagnostic_report()
prescription_report()
specialist_consultation_report()


# In[ ]:





# In[23]:


# Function to create PDF reports for the same patient with different doctors
def generate_alternate_report(report_title, report_content, filename):
    pdf = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()

    # Custom styles
    header_style = ParagraphStyle('HeaderStyle', parent=styles['Heading1'], fontSize=20, textColor=colors.darkblue, alignment=1)
    subheader_style = ParagraphStyle('SubHeaderStyle', parent=styles['Heading2'], fontSize=16, textColor=colors.black, alignment=1)
    body_style = ParagraphStyle('BodyStyle', parent=styles['BodyText'], fontSize=12)

    flowables = []

    # Add title
    flowables.append(Paragraph(report_title, header_style))
    flowables.append(Spacer(1, 0.1 * inch))

    # Add report content
    for section_title, section_content in report_content.items():
        flowables.append(Paragraph(section_title, subheader_style))
        flowables.append(Spacer(1, 0.05 * inch))

        if isinstance(section_content, list):
            # If the section content is a list, create a table
            table = Table(section_content, colWidths=[1.5 * inch, 1.5 * inch, 1.5 * inch])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('FONTSIZE', (0, 0), (-1, -1), 11),
                ('LEFTPADDING', (0, 0), (-1, -1), 10),
                ('RIGHTPADDING', (0, 0), (-1, -1), 10),
                ('TOPPADDING', (0, 0), (-1, -1), 5),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ]))
            flowables.append(table)
        else:
            flowables.append(Paragraph(section_content, body_style))
        
        flowables.append(Spacer(1, 0.1 * inch))

    # Add footer
    footer = Paragraph("Generated by Healthcare System", styles['Normal'])
    flowables.append(Spacer(1, 0.5 * inch))
    flowables.append(footer)

    # Build PDF
    pdf.build(flowables)

# 1. Comprehensive Clinical Evaluation Report by Dr. Robert Allen
def clinical_evaluation_report_alternate():
    report_title = "Comprehensive Clinical Evaluation Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Gender:</b> Male<br/>"
            "<b>Hospital:</b> Downtown Medical Center<br/>"
            "<b>Date of Visit:</b> 2024-09-12<br/>"
            "<b>Doctor:</b> Dr. Robert Allen"
        ),
        "Chief Complaints": (
            "1. Intermittent chest pressure<br/>"
            "2. Episodes of fatigue<br/>"
            "3. Occasional palpitations"
        ),
        "Vital Signs": [
            ["Vital Sign", "Value"],
            ["Blood Pressure", "145/90 mmHg"],
            ["Heart Rate", "88 bpm"],
            ["Respiratory Rate", "22 breaths/min"],
            ["Temperature", "98.7Â°F"],
        ],
        "Physical Examination": (
            "Cardiovascular: Mild tachycardia noted.<br/>"
            "Respiratory: Clear auscultation, no wheezes."
        ),
        "Diagnosis": "Stable angina; recommend exercise tolerance test.",
        "Treatment Recommendations": (
            "1. Start Metoprolol 25mg once daily<br/>"
            "2. Schedule treadmill stress test<br/>"
            "3. Cardiac rehabilitation referral"
        ),
        "Follow-Up Instructions": "Return in 2 weeks for stress test results."
    }
    generate_alternate_report(report_title, report_content, "Clinical_Evaluation_Report_Alternate.pdf")

# 2. Lab and Diagnostic Report by Dr. Sarah Johnson
def lab_diagnostic_report_alternate():
    report_title = "Lab and Diagnostic Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> Downtown Medical Center<br/>"
            "<b>Date of Report:</b> 2024-09-14<br/>"
            "<b>Doctor:</b> Dr. Sarah Johnson"
        ),
        "Complete Blood Count (CBC)": [
            ["Parameter", "Value", "Reference Range"],
            ["White Blood Cells", "6.8x10^9/L", "4.0-11.0 x 10^9/L"],
            ["Hemoglobin", "14.0 g/dL", "13.0-17.0 g/dL"],
            ["Hematocrit", "42%", "38.0-50.0%"],
            ["Platelet Count", "280x10^9/L", "150-400 x 10^9/L"],
        ],
        "Lipid Profile": [
            ["Parameter", "Value", "Reference Range"],
            ["Total Cholesterol", "230 mg/dL", "<200 mg/dL"],
            ["LDL", "170 mg/dL", "<100 mg/dL"],
            ["HDL", "40 mg/dL", ">40 mg/dL"],
            ["Triglycerides", "220 mg/dL", "<150 mg/dL"],
        ],
        "Interpretation": "Mild dyslipidemia; diet and exercise changes advised.",
        "Recommendations": "Follow-up lipid panel in 3 months."
    }
    generate_alternate_report(report_title, report_content, "Lab_Diagnostic_Report_Alternate.pdf")

# 3. Prescription and Medication Management Report by Dr. Emily Parker
def prescription_report_alternate():
    report_title = "Prescription and Medication Management Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> Downtown Medical Center<br/>"
            "<b>Date:</b> 2024-09-15<br/>"
            "<b>Doctor:</b> Dr. Emily Parker"
        ),
        "Medications Prescribed": [
            ["Medication", "Dosage", "Frequency"],
            ["Metoprolol", "25mg", "Once daily"],
            ["Aspirin", "81mg", "Once daily"],
            ["Atorvastatin", "20mg", "Once daily"],
        ],
        "Observations": (
            "Monitor for side effects: Bradycardia, Hypotension.<br/>"
            "Lipid levels should be assessed in 3 months."
        ),
        "Next Review": "Return in 1 month for evaluation."
    }
    generate_alternate_report(report_title, report_content, "Prescription_Report_Alternate.pdf")

# 4. Specialist Consultation Report by Dr. Lisa Wong
def specialist_consultation_report_alternate():
    report_title = "Specialist Consultation Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> Downtown Medical Center<br/>"
            "<b>Date of Consultation:</b> 2024-09-16<br/>"
            "<b>Specialist:</b> Dr. Lisa Wong"
        ),
        "Consultation Reason": "Assessment for CAD risk factors and management.",
        "Specialist Findings": (
            "Angina symptoms correlated with exertion.<br/>"
            "Stress test results pending; consider coronary angiography based on findings."
        ),
        "Recommendations": "Aggressive management of lipid levels; dietary intervention."
    }
    generate_alternate_report(report_title, report_content, "Specialist_Consultation_Report_Alternate.pdf")

# Generate all alternate reports
clinical_evaluation_report_alternate()
lab_diagnostic_report_alternate()
prescription_report_alternate()
specialist_consultation_report_alternate()


# In[1]:


from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle, Spacer
from reportlab.lib.units import inch

# Function to create PDF reports
def generate_report(report_title, report_content, filename):
    pdf = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()

    # Custom styles
    header_style = ParagraphStyle('HeaderStyle', parent=styles['Heading1'], fontSize=20, textColor=colors.darkblue, alignment=1)
    subheader_style = ParagraphStyle('SubHeaderStyle', parent=styles['Heading2'], fontSize=16, textColor=colors.black, alignment=1)
    body_style = ParagraphStyle('BodyStyle', parent=styles['BodyText'], fontSize=12)

    flowables = []

    # Add title
    flowables.append(Paragraph(report_title, header_style))
    flowables.append(Spacer(1, 0.1 * inch))

    # Add report content
    for section_title, section_content in report_content.items():
        flowables.append(Paragraph(section_title, subheader_style))
        flowables.append(Spacer(1, 0.05 * inch))

        if isinstance(section_content, list):
            # If the section content is a list, create a table
            table = Table(section_content, colWidths=[1.5 * inch, 1.5 * inch, 1.5 * inch])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('FONTSIZE', (0, 0), (-1, -1), 11),
                ('LEFTPADDING', (0, 0), (-1, -1), 10),
                ('RIGHTPADDING', (0, 0), (-1, -1), 10),
                ('TOPPADDING', (0, 0), (-1, -1), 5),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ]))
            flowables.append(table)
        else:
            flowables.append(Paragraph(section_content, body_style))
        
        flowables.append(Spacer(1, 0.1 * inch))

    # Add footer
    footer = Paragraph("Generated by Healthcare System", styles['Normal'])
    flowables.append(Spacer(1, 0.5 * inch))
    flowables.append(footer)

    # Build PDF
    pdf.build(flowables)

# 1. Comprehensive Clinical Evaluation Report
def clinical_evaluation_report():
    report_title = "Comprehensive Clinical Evaluation Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Gender:</b> Male<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Visit:</b> 2024-09-20<br/>"
            "<b>Doctor:</b> Dr. Robert Johnson"
        ),
        "Chief Complaints": (
            "1. Severe fatigue<br/>"
            "2. Occasional palpitations<br/>"
            "3. Difficulty sleeping"
        ),
        "Vital Signs": [
            ["Vital Sign", "Value"],
            ["Blood Pressure", "140/85 mmHg"],
            ["Heart Rate", "88 bpm"],
            ["Respiratory Rate", "18 breaths/min"],
            ["Temperature", "98.7Â°F"],
        ],
        "Physical Examination": (
            "Cardiovascular: Regular rhythm, no murmurs<br/>"
            "Neurological: No focal deficits observed"
        ),
        "Diagnosis": "Uncontrolled hypertension, likely secondary to stress.",
        "Treatment Recommendations": (
            "1. Start Lisinopril 10mg once daily<br/>"
            "2. Advise lifestyle modifications (diet and exercise)<br/>"
            "3. Schedule follow-up in 2 weeks for blood pressure check"
        ),
        "Follow-Up Instructions": "Return in 2 weeks for follow-up."
    }
    generate_report(report_title, report_content, "Clinical_Evaluation_Report_V2.pdf")

# 2. Lab and Diagnostic Report
def lab_diagnostic_report():
    report_title = "Lab and Diagnostic Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Report:</b> 2024-09-22<br/>"
            "<b>Doctor:</b> Dr. Robert Johnson"
        ),
        "Complete Blood Count (CBC)": [
            ["Parameter", "Value", "Reference Range"],
            ["White Blood Cells", "6.8x10^9/L", "4.0-11.0 x 10^9/L"],
            ["Hemoglobin", "14.0 g/dL", "13.0-17.0 g/dL"],
            ["Hematocrit", "42%", "38.0-50.0%"],
            ["Platelet Count", "260x10^9/L", "150-400 x 10^9/L"],
        ],
        "Lipid Profile": [
            ["Parameter", "Value", "Reference Range"],
            ["Total Cholesterol", "230 mg/dL", "<200 mg/dL"],
            ["LDL", "150 mg/dL", "<100 mg/dL"],
            ["HDL", "40 mg/dL", ">40 mg/dL"],
            ["Triglycerides", "180 mg/dL", "<150 mg/dL"],
        ],
        "Interpretation": "Moderate dyslipidemia; dietary changes needed.",
        "Recommendations": "Schedule a follow-up lipid panel in 3 months."
    }
    generate_report(report_title, report_content, "Lab_Diagnostic_Report_V2.pdf")

# 3. Prescription and Medication Management Report
def prescription_report():
    report_title = "Prescription and Medication Management Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date:</b> 2024-09-23<br/>"
            "<b>Doctor:</b> Dr. Robert Johnson"
        ),
        "Medications Prescribed": [
            ["Medication", "Dosage", "Frequency"],
            ["Lisinopril", "10mg", "Once daily"],
            ["Amlodipine", "5mg", "Once daily"],
            ["Atorvastatin", "10mg", "Once daily"],
        ],
        "Observations": (
            "Monitor blood pressure regularly.<br/>"
            "Watch for potential side effects of medications."
        ),
        "Next Review": "Return in 2 weeks for evaluation."
    }
    generate_report(report_title, report_content, "Prescription_Report_V2.pdf")

# 4. Specialist Consultation Report
def specialist_consultation_report():
    report_title = "Specialist Consultation Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Consultation:</b> 2024-09-24<br/>"
            "<b>Specialist:</b> Dr. Sarah Davis"
        ),
        "Consultation Reason": "Evaluation of hypertension and medication management.",
        "Specialist Findings": (
            "Lifestyle modifications emphasized; medication regimen reviewed.<br/>"
            "Follow-up on potential referrals for cardiology and nutrition."
        ),
        "Recommendations": "Continue current medications; schedule nutritionist consult."
    }
    generate_report(report_title, report_content, "Specialist_Consultation_Report_V2.pdf")

# Generate all reports
clinical_evaluation_report()
lab_diagnostic_report()
prescription_report()
specialist_consultation_report()


# In[5]:


from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, TableStyle, Spacer
from reportlab.lib.units import inch

# Function to create PDF reports
def generate_report(report_title, report_content, filename):
    pdf = SimpleDocTemplate(filename, pagesize=A4)
    styles = getSampleStyleSheet()

    # Custom styles
    header_style = ParagraphStyle('HeaderStyle', parent=styles['Heading1'], fontSize=20, textColor=colors.darkblue, alignment=1)
    subheader_style = ParagraphStyle('SubHeaderStyle', parent=styles['Heading2'], fontSize=16, textColor=colors.black, alignment=1)
    body_style = ParagraphStyle('BodyStyle', parent=styles['BodyText'], fontSize=12)

    flowables = []

    # Add title
    flowables.append(Paragraph(report_title, header_style))
    flowables.append(Spacer(1, 0.1 * inch))

    # Add report content
    for section_title, section_content in report_content.items():
        flowables.append(Paragraph(section_title, subheader_style))
        flowables.append(Spacer(1, 0.05 * inch))

        if isinstance(section_content, list):
            # If the section content is a list, create a table
            table = Table(section_content, colWidths=[1.5 * inch, 1.5 * inch, 1.5 * inch])
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightgrey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('FONTSIZE', (0, 0), (-1, -1), 11),
                ('LEFTPADDING', (0, 0), (-1, -1), 10),
                ('RIGHTPADDING', (0, 0), (-1, -1), 10),
                ('TOPPADDING', (0, 0), (-1, -1), 5),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 5),
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ]))
            flowables.append(table)
        else:
            flowables.append(Paragraph(section_content, body_style))
        
        flowables.append(Spacer(1, 0.1 * inch))

    # Add footer
    footer = Paragraph("Generated by Healthcare System", styles['Normal'])
    flowables.append(Spacer(1, 0.5 * inch))
    flowables.append(footer)

    # Build PDF
    pdf.build(flowables)

# New report: Comprehensive Clinical Evaluation Report
def clinical_evaluation_report_new():
    report_title = "Comprehensive Clinical Evaluation Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Gender:</b> Male<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Visit:</b> 2024-09-10<br/>"
            "<b>Doctor:</b> Dr. Sarah Johnson"
        ),
        "Chief Complaints": (
            "1. Frequent headaches<br/>"
            "2. Occasional nausea<br/>"
            "3. Fatigue"
        ),
        "Vital Signs": [
            ["Vital Sign", "Value"],
            ["Blood Pressure", "130/85 mmHg"],
            ["Heart Rate", "78 bpm"],
            ["Respiratory Rate", "18 breaths/min"],
            ["Temperature", "98.7Â°F"],
        ],
        "Physical Examination": (
            "Neurological: No focal deficits observed.<br/>"
            "General: Patient appears well-nourished and in no acute distress."
        ),
        "Diagnosis": "Tension-type headaches, possible migraine triggers.",
        "Treatment Recommendations": (
            "1. Prescribe Ibuprofen 400mg as needed for headaches.<br/>"
            "2. Advise lifestyle modifications: Hydration, regular meals.<br/>"
            "3. Follow-up in 2 weeks to reassess."
        ),
        "Follow-Up Instructions": "Schedule a follow-up in 2 weeks."
    }
    generate_report(report_title, report_content, "Clinical_Evaluation_Report_New.pdf")

# New report: Lab and Diagnostic Report
def lab_diagnostic_report_new():
    report_title = "Lab and Diagnostic Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Report:</b> 2024-09-11<br/>"
            "<b>Doctor:</b> Dr. Sarah Johnson"
        ),
        "Complete Blood Count (CBC)": [
            ["Parameter", "Value", "Reference Range"],
            ["White Blood Cells", "6.5x10^9/L", "4.0-11.0 x 10^9/L"],
            ["Hemoglobin", "14.2 g/dL", "13.0-17.0 g/dL"],
            ["Hematocrit", "42%", "38.0-50.0%"],
            ["Platelet Count", "220x10^9/L", "150-400 x 10^9/L"],
        ],
        "Electrolyte Panel": [
            ["Parameter", "Value", "Reference Range"],
            ["Sodium", "140 mEq/L", "135-145 mEq/L"],
            ["Potassium", "4.2 mEq/L", "3.5-5.0 mEq/L"],
            ["Chloride", "100 mEq/L", "98-106 mEq/L"],
            ["Bicarbonate", "25 mEq/L", "22-28 mEq/L"],
        ],
        "Interpretation": "Results within normal limits; no immediate concerns identified.",
        "Recommendations": "Continue monitoring symptoms; follow up if headaches persist."
    }
    generate_report(report_title, report_content, "Lab_Diagnostic_Report_New.pdf")

# New report: Prescription and Medication Management Report
def prescription_report_new():
    report_title = "Prescription and Medication Management Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date:</b> 2024-09-12<br/>"
            "<b>Doctor:</b> Dr. Sarah Johnson"
        ),
        "Medications Prescribed": [
            ["Medication", "Dosage", "Frequency"],
            ["Ibuprofen", "400mg", "As needed for headaches"],
            ["Melatonin", "3mg", "Before bedtime as needed"],
            ["Omega-3", "1000mg", "Once daily"],
        ],
        "Observations": (
            "Monitor for efficacy and side effects: Drowsiness, gastrointestinal upset.<br/>"
            "Encourage patient to keep a headache diary for follow-up."
        ),
        "Next Review": "Return in 2 weeks for evaluation."
    }
    generate_report(report_title, report_content, "Prescription_Report_New.pdf")

# New report: Specialist Consultation Report
def specialist_consultation_report_new():
    report_title = "Specialist Consultation Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Consultation:</b> 2024-09-13<br/>"
            "<b>Specialist:</b> Dr. Michael Lee"
        ),
        "Consultation Reason": "Further evaluation of recurrent headaches and assessment of potential triggers.",
        "Specialist Findings": (
            "Patient educated on stress management techniques.<br/>"
            "Suggested cognitive behavioral therapy for headache management."
        ),
        "Recommendations": "Follow-up in 1 month to monitor progress; consider MRI if symptoms persist."
    }
    generate_report(report_title, report_content, "Specialist_Consultation_Report_New.pdf")

# Generate all new reports
clinical_evaluation_report_new()
lab_diagnostic_report_new()
prescription_report_new()
specialist_consultation_report_new()


# In[3]:


# 1. Comprehensive Clinical Evaluation Report
def clinical_evaluation_report_v2():
    report_title = "Comprehensive Clinical Evaluation Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Gender:</b> Male<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Visit:</b> 2024-09-12<br/>"
            "<b>Doctor:</b> Dr. Michael Johnson"
        ),
        "Chief Complaints": (
            "1. Severe fatigue<br/>"
            "2. Occasional palpitations<br/>"
            "3. Mild swelling in the ankles"
        ),
        "Vital Signs": [
            ["Vital Sign", "Value"],
            ["Blood Pressure", "130/85 mmHg"],
            ["Heart Rate", "78 bpm"],
            ["Respiratory Rate", "18 breaths/min"],
            ["Temperature", "98.4Â°F"],
        ],
        "Physical Examination": (
            "Cardiovascular: Regular rhythm, no murmurs<br/>"
            "Respiratory: Clear to auscultation bilaterally"
        ),
        "Diagnosis": "Uncontrolled hypertension, consider medication adjustment.",
        "Treatment Recommendations": (
            "1. Increase Lisinopril to 20mg once daily<br/>"
            "2. Monitor blood pressure weekly<br/>"
            "3. Follow-up in 2 weeks for re-evaluation"
        ),
        "Follow-Up Instructions": "Return in 2 weeks for blood pressure check."
    }
    generate_report(report_title, report_content, "Clinical_Evaluation_Report_v3.pdf")

# 2. Lab and Diagnostic Report
def lab_diagnostic_report_v2():
    report_title = "Lab and Diagnostic Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Report:</b> 2024-09-14<br/>"
            "<b>Doctor:</b> Dr. Michael Johnson"
        ),
        "Complete Blood Count (CBC)": [
            ["Parameter", "Value", "Reference Range"],
            ["White Blood Cells", "6.5x10^9/L", "4.0-11.0 x 10^9/L"],
            ["Hemoglobin", "14.2 g/dL", "13.0-17.0 g/dL"],
            ["Hematocrit", "42%", "38.0-50.0%"],
            ["Platelet Count", "300x10^9/L", "150-400 x 10^9/L"],
        ],
        "Lipid Profile": [
            ["Parameter", "Value", "Reference Range"],
            ["Total Cholesterol", "220 mg/dL", "<200 mg/dL"],
            ["LDL", "145 mg/dL", "<100 mg/dL"],
            ["HDL", "40 mg/dL", ">40 mg/dL"],
            ["Triglycerides", "190 mg/dL", "<150 mg/dL"],
        ],
        "Interpretation": "Lipid profile indicates increased cardiovascular risk; dietary modification recommended.",
        "Recommendations": "Schedule a follow-up in 1 month for lipid panel re-evaluation."
    }
    generate_report(report_title, report_content, "Lab_Diagnostic_Report_v3.pdf")

# 3. Prescription and Medication Management Report
def prescription_report_v2():
    report_title = "Prescription and Medication Management Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date:</b> 2024-09-15<br/>"
            "<b>Doctor:</b> Dr. Michael Johnson"
        ),
        "Medications Prescribed": [
            ["Medication", "Dosage", "Frequency"],
            ["Lisinopril", "20mg", "Once daily"],
            ["Amlodipine", "5mg", "Once daily"],
            ["Simvastatin", "20mg", "Once daily"],
        ],
        "Observations": (
            "Monitor for side effects: Cough, dizziness<br/>"
            "Follow up with blood tests in 4 weeks."
        ),
        "Next Review": "Return in 2 weeks for evaluation."
    }
    generate_report(report_title, report_content, "Prescription_Report_v3.pdf")

# 4. Specialist Consultation Report
def specialist_consultation_report_v2():
    report_title = "Specialist Consultation Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Consultation:</b> 2024-09-16<br/>"
            "<b>Specialist:</b> Dr. Sarah Thompson"
        ),
        "Consultation Reason": "Assessment of hypertension and potential cardiovascular risk.",
        "Specialist Findings": (
            "Patient education on lifestyle changes; weight loss and diet modification advised.<br/>"
            "Stress management techniques discussed."
        ),
        "Recommendations": "Follow-up in 1 month with primary care for further management."
    }
    generate_report(report_title, report_content, "Specialist_Consultation_Report_v3.pdf")

# Generate all reports for John Smith with new details
clinical_evaluation_report_v2()
lab_diagnostic_report_v2()
prescription_report_v2()
specialist_consultation_report_v2()


# In[4]:


# 1. Comprehensive Clinical Evaluation Report
def clinical_evaluation_report_v3():
    report_title = "Comprehensive Clinical Evaluation Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Gender:</b> Male<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Visit:</b> 2024-09-20<br/>"
            "<b>Doctor:</b> Dr. Emily White"
        ),
        "Chief Complaints": (
            "1. Persistent cough<br/>"
            "2. Shortness of breath during exertion<br/>"
            "3. Occasional chest discomfort"
        ),
        "Vital Signs": [
            ["Vital Sign", "Value"],
            ["Blood Pressure", "135/90 mmHg"],
            ["Heart Rate", "82 bpm"],
            ["Respiratory Rate", "20 breaths/min"],
            ["Temperature", "97.8Â°F"],
        ],
        "Physical Examination": (
            "Respiratory: Wheezing noted on expiration<br/>"
            "Cardiovascular: No murmurs; regular rhythm"
        ),
        "Diagnosis": "Asthma exacerbation; consider inhaler prescription.",
        "Treatment Recommendations": (
            "1. Prescribe Albuterol inhaler as needed<br/>"
            "2. Advise daily use of Fluticasone inhaler<br/>"
            "3. Follow-up in 1 month for asthma management"
        ),
        "Follow-Up Instructions": "Return in 1 month for reassessment."
    }
    generate_report(report_title, report_content, "Clinical_Evaluation_Report_v4.pdf")

# 2. Lab and Diagnostic Report
def lab_diagnostic_report_v3():
    report_title = "Lab and Diagnostic Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Report:</b> 2024-09-22<br/>"
            "<b>Doctor:</b> Dr. Emily White"
        ),
        "Pulmonary Function Test (PFT)": [
            ["Parameter", "Value", "Reference Range"],
            ["FEV1", "60%", ">80% of predicted"],
            ["FVC", "70%", ">80% of predicted"],
            ["FEV1/FVC Ratio", "0.85", "Normal (>0.70)"],
        ],
        "Interpretation": "PFT indicates mild obstruction consistent with asthma.",
        "Recommendations": "Increase use of bronchodilators as necessary."
    }
    generate_report(report_title, report_content, "Lab_Diagnostic_Report_v4.pdf")

# 3. Prescription and Medication Management Report
def prescription_report_v3():
    report_title = "Prescription and Medication Management Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date:</b> 2024-09-23<br/>"
            "<b>Doctor:</b> Dr. Emily White"
        ),
        "Medications Prescribed": [
            ["Medication", "Dosage", "Frequency"],
            ["Albuterol Inhaler", "90 mcg", "As needed"],
            ["Fluticasone Inhaler", "250 mcg", "Twice daily"],
        ],
        "Observations": (
            "Patient advised to monitor peak flow readings.<br/>"
            "Ensure proper inhaler technique."
        ),
        "Next Review": "Follow up in 1 month for asthma management."
    }
    generate_report(report_title, report_content, "Prescription_Report_v4.pdf")

# 4. Specialist Consultation Report
def specialist_consultation_report_v3():
    report_title = "Specialist Consultation Report"
    report_content = {
        "Patient Information": (
            "<b>Name:</b> John Smith<br/>"
            "<b>Age:</b> 56<br/>"
            "<b>Date of Birth:</b> 1968-05-15<br/>"
            "<b>Hospital:</b> City General Hospital<br/>"
            "<b>Date of Consultation:</b> 2024-09-24<br/>"
            "<b>Specialist:</b> Dr. Linda Brown"
        ),
        "Consultation Reason": "Management of asthma and evaluation of triggers.",
        "Specialist Findings": (
            "Discussed potential environmental triggers; advised on avoidance strategies.<br/>"
            "Patient education on asthma action plan."
        ),
        "Recommendations": "Follow-up in 2 months for further assessment."
    }
    generate_report(report_title, report_content, "Specialist_Consultation_Report_v4.pdf")

# Generate all reports for John Smith with new details
clinical_evaluation_report_v3()
lab_diagnostic_report_v3()
prescription_report_v3()
specialist_consultation_report_v3()

